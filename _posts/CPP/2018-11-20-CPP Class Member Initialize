---
layout: post
title: C++中的类成员初始化 CPP Class Member Initialize
categories: [CPP]
description:  C++中的类成员初始化
keywords: CPP
---

# 前言

在项目中有用到C++的类的反射，将一些功能节点以类型名的方式暴露给策划配置。结果这种越写越奔放，到后来有一次就光顾着往类里面添加成员变量，没记着给这些成员变量添加初始化。
按说这种写也没有什么，因为策划总是会给这些变量设定值的，但是万一有人偷懒了呢，所以这种不保险的行为就该准准确确地知道后果。

# new VS new()

这个是之前就知道的事情，在这里可以好好扯一扯。具体的行为表现是这样子的。
参考这里的答案https://stackoverflow.com/a/620402

> 假设有这样的代码:
struct A { int m; }; // POD
struct B { ~B(); int m; }; // non-POD, compiler generated default ctor
struct C { C() : m() {}; ~C(); int m; }; // non-POD, default-initialising m

> 在C98编译器中的行为是
new A - indeterminate value
new A() - zero-initialize
new B - default construct (B::m is uninitialized)
new B() - default construct (B::m is uninitialized)
new C - default construct (C::m is zero-initialized)
new C() - default construct (C::m is zero-initialized)

> 在C03编译器中的行为是
new A - indeterminate value
new A() - value-initialize A, which is zero-initialization since it's a POD.
new B - default-initializes (leaves B::m uninitialized)
new B() - value-initializes B which zero-initializes all fields since its default ctor is compiler generated as opposed to user-defined.
new C - default-initializes C, which calls the default ctor.
new C() - value-initializes C, which calls the default ctor.

可以看到在不同编译器版本中，可能有着不同的初始化行为，带不带括号也有很大的影响。
下面尝试着解释一下这种行为。

# POD 

C++ Reference中对于其解释为，指定类型为 POD （Plain Old Data ，简旧数据）类型。这表示该类型与用于 C 程序语言的类型兼容，即能直接以其二进制形式与 C 库交互。
也就是说，所有用到了C++中有而C中没有的特性，都不能成为POD，也因此就更容易理解下面的POD的分类

* 标量类型；
* 满足下列要求的类类型（ class 或 struct 或 union ）：
* 聚合类型；
    * 没有引用类型成员；
    * 没有用户定义的复制构造函数；
    * 没有用户定义的析构函数
    * 没有非 POD 的非静态成员；
    * (C++11 前)
    * 平凡类型；
    * 标准布局类型；
    * 没有非 POD 的非静态成员；
    * (C++11 起)
* 这种类型的数组。

在C11之前，如果一个类中没有引用（显然是C++特性），没有用户定义的复制构造和析构就可以是POD了，上例中A什么都没有，自然是POD，而BC中都有了用户定义的析构函数，所以不是POD。
那在C11之后呢，其实如果按照标准来讲啊，C11自然是兼容以前的代码了，那以前是POD的现在肯定也是POD的，不然兼容肯定会出问题的啦~
不过也可以在平凡类型中找到BC不是POD的理由。
什么样子的类型是平凡的呢
* 可平凡复制 (TriviallyCopyable)
* 拥有一个或多个默认构造函数，全部均为平凡或被删除，至少有一个未被删除。
B中存在一个未被删除的默认构造函数（编译器生成的），但是B不可平凡复制。因为平凡复制的要求是
* 每个复制构造函数为平凡或被删除
* 每个移动构造函数为平凡或被删除
* 每个复制赋值运算符为平凡或被删除
* 每个移动赋值运算符平凡或被删除
* 至少一个复制构造函数、移动构造函数、复制赋值运算符或移动赋值运算符未被删除
* 平凡而未被删除的析构函数

这里的平凡，都是指非用户提供的函数，而BC都用用户提供的析构、构造函数，因此BC都不满足POD的要求。

# Class A

现在，A是POD类型.
## C03之前

new A 和 new A()均为默认初始化的动作。

默认初始化的效果是：
若 T 是非 POD (C++11 前)类类型，则构造函数得到考虑，并受制于针对空形参列表的重载决议。调用所选的构造函数（默认构造函数之一），以提供新对象的初始值；
若 T 是数组类型，则每个数组元素都被默认初始化；
否则，不做任何事：拥有静态存储期的对象（及其子对象）被初始化为不确定值。

因此，A中的对象不会被初始化为任何确定的值。（但是编译器可能会帮你做一些事情，例如VS在Debug中会初始化为CDCDCDCD）
这里的重载决议，听起来挺复杂，实际上就是如果你的构造函数是这样A（int a = 0）有默认值的，自然就重载了啊。
当然我手头也没有C03的编译器，无法确定为什么标准和回答的不一致，不过现在也见不到不支持C03的编译器了吧。
*昨日，拼了老命，搭了一个gcc 4.2，测试不支持C11的情况*

## C03之后

new A还是默认初始化
但是new A()变成了值初始化*当拥有动态存储期的临时对象为 new 表达式以空括号或花括号 (C++11 起)对组成的初始化器创建时；*

而值初始化的效果是
1) 若 T 是至少有一个用户提供的任意类型的构造函数的类类型，则调用默认构造函数；(C++11 前)
1) 若 T 是无默认构造函数或拥有用户提供或删除的默认构造函数的类类型，则默认初始化对象;(C++11 起)
2) 若 T 是非联合体无任何用户提供构造函数的类类型，则值初始化 T 的每个非静态数据成员与基类组分；(C++11 前)
2) 若 T 是拥有默认构造函数的类类型，而默认构造函数既非用户提供亦非被删除（即它可以是拥有隐式定义或默认的默认构造函数），则先零初始化，然后若有非平凡的默认构造函数则默认初始化对象；(C++11 起)
3) 若 T 是数组类型，则数组的每个元素都被值初始化；
4) 否则，对象被零初始化。

显然A没有自己的构造函数，都会执行2中的值初始化或者先零初始化，而值初始化在此处也是为每一个变量赋值零。所以new A()使得所有变量均为0。

# Class B

## C03之前
new B 和 new B()均为默认初始化的动作。
而默认的初始化动作是什么都不做

## C03之后
new B还是默认初始化
但是new B()变成了值初始化

# Class C

有提供构造函数，直接调用用户的构造函数，而这里的默认构造函数是对m进行了默认初始化，即初始化为0.如果这里没有对n进行初始化，那么m的值就是一个默认值，即不确定的值。

# 总结

其实现在应该很少有人用不支持C03的编译器了吧，所以其实主要关注C03之后的结果就可以了。
而在C03之后呢，如果有用户提供了构造函数，就会去调用用户的构造函数，而如果用户的构造函数没能尽到初始化数据的任务，那么数据就会未被初始化。
如果用户没有提供构造函数，那么如果带了括号，就会进行默认的值初始化（零初始化），从某种意义上讲，反倒是比提供一个不进行初始化的默认构造要好。
如果没有带括号，则会被进行默认构造，而默认构造是不进行任何操作，数据会被初始化为一个不确定的数值。

# 另
这里都是认为在初始化一个局部的动态变量，全局或者静态变量的初始化可能有所不同。